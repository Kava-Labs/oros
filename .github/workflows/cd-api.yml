name: Continuous Deployment - API

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_run:
    workflows:
      - Continuous Integration - API
    branches: [main]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY_ID: "843137275421"
  ECR_REPOSITORY: kavachat-api
  ECS_SERVICE: kavachat-api
  ECS_CLUSTER: kavachat
  # This is the family name of the task definition, excluding revision to get
  # the latest ACTIVE revision.
  ECS_TASK_DEFINITION_FAMILY: kavachat-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials for service deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download full Docker image name from artifacts
        uses: actions/download-artifact@v4
        with:
          name: kavachat-api-docker-image-name
          path: image-name.txt

      - name: Read full Docker image name
        id: read-docker-image
        run: |
          IMAGE_NAME=$(cat image-name.txt)
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
            --query taskDefinition > task-definition.json

      - name: Update image ID in Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          # Only modify the image, nothing else
          image: ${{ steps.read-docker-image.outputs.image_name }}
          # Container name matches service name
          container-name: ${{ env.ECS_SERVICE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

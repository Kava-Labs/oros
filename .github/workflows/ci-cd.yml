name: CI / CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  # Only cancel in-progress jobs on non-main branches
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: kavachat-api

jobs:
  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    env:
      VITE_OPENAI_BASE_URL: https://kavachat-api.production.kava.io/openai/v1
    outputs:
      changed: ${{ steps.diff.outputs.diff != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: diff
        uses: technote-space/get-diff-action@v6
        # Only files that are relevant to new frontend build.
        # Also includes workflow files in case build process changes.
        # Excludes API and tests
        with:
          PATTERNS: |
            **/*.(js|ts|tsx|html)
            **/tsconfig.*
            src/**
            public/**
            !.github/**
            !api/**
            .github/workflows/**
          FILES: |
            package.json
            package-lock.json

      - name: Install Node.js
        if: env.GIT_DIFF
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        if: env.GIT_DIFF
        run: npm ci

      - name: Build app
        if: env.GIT_DIFF
        run: npm run build

      - name: Upload build artifact
        # Only if changes and push on main branch
        if: env.GIT_DIFF && github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          if-no-files-found: error
          retention-days: 1

  docker-build-test:
    runs-on: ubuntu-latest
    env:
      KAVA_TAG: v0.27.0-goleveldb
      KVTOOL_CONFIGTEMPLATE: v0.26
      # kavachat API
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL: https://api.openai.com/v1
      # Frontend playwright tests
      VITE_OPENAI_BASE_URL: http://localhost:5555/openai/v1
    outputs:
      changed: ${{ steps.diff.outputs.diff != '' }}
      image-name: ${{ steps.image-name.outputs.image }}
    steps:
      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          # Also clone kvtool submodule
          submodules: true

      - name: Check for API server changes
        id: diff
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            ./api/**

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials for container registry
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.REPO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.REPO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image name
        id: image-name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          # Do not push before running E2E tests
          push: false
          load: true
          tags: ${{ steps.image-name.outputs.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Setup kvtool build environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./api/go.mod
          cache-dependency-path: |
            ./api/go.sum
            ./tests/kvtool/go.mod

      - name: Install kvtool
        run: make -C tests/kvtool install

      # kvtool is only used to generate the kava config files for the container to mount
      - name: Generate kava config
        run: kvtool testnet gen-config kava --kava.configTemplate $KVTOOL_CONFIGTEMPLATE

      - name: Start proxy and kava node
        env:
          KAVACHAT_IMAGE: ${{ steps.image-name.outputs.image }}
        # Wait for containers to be healthy or fail after 30 seconds
        run: |
          echo "Using image $KAVACHAT_IMAGE"
          docker compose \
            -f docker-compose.yaml \
            -f docker-compose.ci.yaml \
            up -d --wait --wait-timeout 30

      - name: Output logs if containers are unhealthy
        if: failure()
        run: docker compose -f docker-compose.yaml logs

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install node dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Playwright tests
        run: DEBUG=pw:webserver xvfb-run npx playwright test

      - name: Shutdown proxy and kava node
        if: always()
        run: docker compose -f docker-compose.yaml down

      - name: Push Docker image to Amazon ECR
        # Only push images on main branch pushes AND if API files were changed.
        if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' && steps.diff.outputs.diff != '' }}
        uses: docker/build-push-action@v6
        with:
          # Path context instead of git context so it doesn't build from remote repo
          context: ./api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.image-name.outputs.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production-api:
    name: Deploy API to production
    needs:
      - docker-build-test
    # Only run on main branch pushes and if API files changed
    if: |
      needs.docker-build-test.outputs.changed == 'true' &&
      (github.ref == 'refs/heads/main') && github.event_name == 'push'
    uses: ./.github/workflows/deploy-api.yml
    # This passes **repo secrets** which are actually not set (empty strings).
    # However, this grants access to the child workflow to read the secrets from
    # the **environment secrets**
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    with:
      environment-name: api-production
      environment-url: https://kavachat-api.production.kava.io
      image-name: ${{ needs.docker-build-test.outputs.image-name }}

  deploy-frontend:
    name: Deploy frontend to production
    needs:
      # Requires built files artifact
      - build-frontend
      # Requires API deployment to be successful (or skipped due to no changes)
      - deploy-production-api
    # Run when all are true:
    # - New frontend build 'success' AND has changes (needs explicit == 'true' check as its a string, 'false' is still truthy)
    # - If API deploy was 'success' OR 'skipped' (no changes)
    # - Push on main branch
    if: |
      always() &&
      needs.build-frontend.result == 'success' &&
      needs.build-frontend.outputs.changed == 'true' &&
      (needs.deploy-production-api.result == 'success' || needs.deploy-production-api.result == 'skipped') &&
      (github.ref == 'refs/heads/main' && github.event_name == 'push')
    uses: ./.github/workflows/deploy-netlify.yml
    secrets:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    with:
      environment-name: frontend-production
